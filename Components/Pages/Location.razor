@using Models
@rendermode RenderMode.InteractiveServer

<h3>Location</h3>
<h3 style="color:green;">@msg</h3>
<div>
    <RadzenPanel Visible=@modify>
        <RadzenDropDown @bind-Value=@locationID Placeholder="Select Location" TValue=int Data=@lstLocationddl TextProperty="Display" ValueProperty="ID" Change=ddlLocation_click />
    </RadzenPanel>
    <RadzenPanel Visible=@create>
        <table style="width:80%; margin-left:auto; margin-right:auto;">
            <tr>
                <td>
                    Street Address: <br />
                    <RadzenTextBox @bind-Value=@streetAddress />
                </td>
                <td>
                    City:
                    <RadzenTextBox @bind-Value=@city />
                </td>
                <td>
                    State | Province:
                    <RadzenTextBox @bind-Value=@state />
                </td>
                <td>
                    Postal Code:
                    <RadzenTextBox @bind-Value=@postalCode />
                </td>
            </tr>
            <tr>
                <td colspan="3" style="margin-left:auto; margin-right:auto;">
                    <RadzenButton Text="Submit" Click=btnSubmit_click />
                    <RadzenButton Text="Cancel" Click=btnCancel_click />
                </td>
            </tr>
        </table>
    </RadzenPanel>
</div>
@code
{
    [Parameter]
    public bool create { get; set; } = false;
    [Parameter]
    public bool modify { get; set; } = false;

    public List<ddlClass> lstLocationddl = new List<ddlClass>();
    public List<Models.Location> lstLocation = new List<Models.Location>();
    Models.Location location = new Models.Location();
    public string streetAddress = "", city = "", state = "", postalCode = "", msg = "";
    public int locationID = -1;

    protected override async Task OnInitializedAsync()
    {
        //Gets a list of all Locations ddl
        HttpClient http = new HttpClient();
        http.BaseAddress = new Uri("https://escassessmentapi.azure-api.net/");
        var resp = await http.GetAsync("ESC/GetLocations");
        resp.EnsureSuccessStatusCode();
        lstLocationddl = await resp.Content.ReadFromJsonAsync<List<ddlClass>>();
    }

    public async Task ddlLocation_click()
    {
        HttpClient http = new HttpClient();
        http.BaseAddress = new Uri("https://escassessmentapi.azure-api.net/");
        var resp = await http.GetAsync("ESC/GetLocation?locID=" + locationID + "");
        resp.EnsureSuccessStatusCode();
        lstLocation = await resp.Content.ReadFromJsonAsync<List<Models.Location>>();
        location = lstLocation[0];
        streetAddress = location.StreetAddress;
        city = location.City;
        state = location.StateProvince;
        postalCode = location.PostalCode;
        create = true;
        modify = false;
    }

    public async Task btnSubmit_click()
    {
        HttpClient http = new HttpClient();
        http.BaseAddress = new Uri("https://escassessmentapi.azure-api.net/");
        location.StreetAddress = streetAddress;
        location.City = city;
        location.StateProvince = state;
        location.PostalCode = postalCode;
        if (locationID == -1)
        {
            var resp = await http.PostAsJsonAsync("ESC/CreateLocation", location);
            resp.EnsureSuccessStatusCode();
            string ret = await resp.Content.ReadAsStringAsync();
            if (ret == "1")
            {
                msg = "Location Created";
                create = false;
                modify = true;
                locationID = -1;
                resp = await http.GetAsync("ESC/GetLocations");
                resp.EnsureSuccessStatusCode();
                lstLocationddl = await resp.Content.ReadFromJsonAsync<List<ddlClass>>();
            }
        }
        else
        {
            var resp = await http.PostAsJsonAsync("ESC/UpdateLocation", location);
            resp.EnsureSuccessStatusCode();
            string ret = await resp.Content.ReadAsStringAsync();
            if (ret == "1")
            {
                msg = "Location Updated";
                create = false;
                modify = true;
                locationID = -1;
                resp = await http.GetAsync("ESC/GetLocations");
                resp.EnsureSuccessStatusCode();
                lstLocationddl = await resp.Content.ReadFromJsonAsync<List<ddlClass>>();
            }
        }
    }

    public void btnCancel_click()
    {
        streetAddress = "";
        city = "";
        state = "";
        postalCode = "";
        locationID = -1;
    }
}
